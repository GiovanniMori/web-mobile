datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  communities   Community[]
  comments      Comment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Community {
  id          String  @id @default(cuid())
  name        String
  description String
  posts       Post[]
  User        User?   @relation(fields: [userId], references: [id])
  userId      String?
}

model Post {
  id          String       @id @default(cuid())
  title       String
  content     String
  author      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categories  Categories[]
  comments    Comment[]
  Community   Community?   @relation(fields: [communityId], references: [id])
  communityId String?
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model Categories {
  id    String @id @default(cuid())
  name  String
  posts Post[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post     @relation(fields: [postId], references: [id])
  postId    String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
